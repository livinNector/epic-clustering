[
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "OPPE Coding Patterns",
    "section": "",
    "text": "import os\n\nfrom pathlib import Path\n\nvisualizations = Path('visualizations')\n\nfor oppe in visualizations.glob(\"*\"):\n    for visualization in sorted(oppe.glob(\"m20/**/*\")):\n        problem_name = str(visualization).split('/')[-1].split(\"_\",1)[-1].split('.')[0].replace(\"_\", \" \").title()\n        print(f\"|{problem_name} | [M20]({visualization}) | [M10]({str(visualization).replace('m20','m10')})|\")\n    \n    \n\n|Increment Value Of Key In Dict With Max Limit | [M20](visualizations/24_sep_oppe1/m20/01_increment_value_of_key_in_dict_with_max_limit.html) | [M10](visualizations/24_sep_oppe1/m10/01_increment_value_of_key_in_dict_with_max_limit.html)|\n|Check Positive Odd Or Negative Even | [M20](visualizations/24_sep_oppe1/m20/02_check_positive_odd_or_negative_even.html) | [M10](visualizations/24_sep_oppe1/m10/02_check_positive_odd_or_negative_even.html)|\n|Last Word In A Given Sentence That Starts With Uppercase Letter | [M20](visualizations/24_sep_oppe1/m20/03_last_word_in_a_given_sentence_that_starts_with_uppercase_letter.html) | [M10](visualizations/24_sep_oppe1/m10/03_last_word_in_a_given_sentence_that_starts_with_uppercase_letter.html)|\n|Count Positive Integers Ignoring None | [M20](visualizations/24_sep_oppe1/m20/04_count_positive_integers_ignoring_none.html) | [M10](visualizations/24_sep_oppe1/m10/04_count_positive_integers_ignoring_none.html)|\n|Upper Case Only Vowels Cluster | [M20](visualizations/24_sep_oppe1/m20/05_upper_case_only_vowels_cluster.html) | [M10](visualizations/24_sep_oppe1/m10/05_upper_case_only_vowels_cluster.html)|\n|Find Sum And Absolute Difference Alternately | [M20](visualizations/24_sep_oppe1/m20/06_find_sum_and_absolute_difference_alternately.html) | [M10](visualizations/24_sep_oppe1/m10/06_find_sum_and_absolute_difference_alternately.html)|\n|Student Marks Filter | [M20](visualizations/24_sep_oppe1/m20/07_student_marks_filter.html) | [M10](visualizations/24_sep_oppe1/m10/07_student_marks_filter.html)|\n|Matrix Walk Cluster | [M20](visualizations/24_sep_oppe1/m20/08_matrix_walk_cluster.html) | [M10](visualizations/24_sep_oppe1/m10/08_matrix_walk_cluster.html)|\n|Print Pattern - V | [M20](visualizations/24_sep_oppe1/m20/09_print_pattern_-_v.html) | [M10](visualizations/24_sep_oppe1/m10/09_print_pattern_-_v.html)|\n|Pattern Print - N | [M20](visualizations/24_sep_oppe1/m20/10_pattern_print_-_n.html) | [M10](visualizations/24_sep_oppe1/m10/10_pattern_print_-_n.html)|\n\n\n\nimport os\nfrom pydantic import BaseModel, Field, ConfigDict\ndef snake_case(s):\n    return s.replace(\" \", \"_\").lower()\n\nclass CodingPatternDescription(BaseModel):\n    description: str = Field(description='Description of the common coding pattern, syntactic and semantic structure and the differences. Description should be not qualitiative but descriptive and neutral. The description should have all the syntactic and semantic relationships captured. Description should have parts of code as references in it. Example. The code starts with a function definition, with a declaration a variable using a boolean expression with an if condition with ... ')\n    coding_pattern_tags: list[str] = Field(description='List of tags describing, common syntactic, semantic patterns, approaches and issues')\n    candidate_code: str = Field(description='Single candidate code snippet demonstrating those patterns')\n\nclass CodingPatternDifference(BaseModel):\n    id:int\n    difference: str = Field(description='short description of  explicit specific differences between given pattern and the other.')\n\nclass CodingPattern(BaseModel):\n    id: int\n    differences: list[CodingPatternDifference] = Field(description='list of differences between the current pattern and the other pattern.')\n    name: str = Field(description='A quantitative, specific, differentiating name for the coding pattern that describes the most differentiating features among different patterns. The name should also have the common feature within the pattern.')\n\nclass CodingPatterns(BaseModel):\n    patterns: list[CodingPattern] = Field(description='List of all patterns with detailed and differentiaing names describing important notable feature the syntactic or semantic constructs for the different patterns with ids. the name should be detailed and differentiating and describing it completely, The name should not be qualitiative but descriptive.')\n\nclass ClusterAnalysis(BaseModel):\n    question_description: str\n    coding_pattern_descriptions: dict[int, CodingPatternDescription]\n    coding_patterns: CodingPatterns\n    differences : list[tuple[list[int],str]]\n    model_config = ConfigDict(populate_by_name=True,from_attributes=True)\n\n    def to_file(self, suffix=\"\"):\n        with open(f\"{snake_case(self.question_description)}_cluster_analysis{suffix}.json\", \"w\") as f:\n            f.write(self.model_dump_json(indent=2))\n\n    @classmethod\n    def from_file(cls, file_name):\n        with open(file_name, \"r\") as f:\n            return cls.model_validate_json(f.read())\n\n    @classmethod\n    def from_question_description(cls, question_description, suffix=\"\"):\n        with open(f\"{snake_case(question_description)}_cluster_analysis{suffix}.json\", \"r\") as f:\n            return cls.model_validate_json(f.read())\n\n\nfor file_name in list(filter(lambda x: \"analysis.json\" in x,  os.listdir())):\n    try:\n        analysis = ClusterAnalysis.from_file(file_name)\n        print(analysis.question_description)\n\n        print(*[(pattern.id, pattern.name, pattern.differences) for pattern in  analysis.coding_patterns.patterns], sep='\\n')\n        print('---')\n    except:\n        pass"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "OPPE Code Patterns",
    "section": "",
    "text": "This site is contains visualizations about different coding patterns observed from different OPPEs.\nThese are 10 programming problems from 24 September OPPE 1. In these visualizations each data point corresponds to individual code submission.\nWe created a 2D representation of these code submissions using an BERT-based model called Codesage. Which we clustered to find meaningful and interpretable clusters.\nThese names to the cluster were generated by an LLM summarizing the submissions.\n\nYou can hover over to see individual code submissions.\nZoom in by selecting a region.\nClick on the lables in the legend on the side to toggle the data points belonging to that clusters.\n\nNote that these only contain a subset of all the submissions which are grouped as clusters.\nYou may find different patterns and different ways of approaching a problem, some might be correct some might be wrong. Try to compare different approaches to find what is better according to you.\nM10 and M20 refers to the min_cluster_size hyperparameter used with the clustering algorithm.\nNote: These cluster/Pattern labels are generated using Large Language Models, which can be incorrect sometimes.\n\n\n\nProblem Name\nM20 Clusters\nM10 Clusters (has fine grained patterns)\n\n\n\n\nIncrement Value Of Key In Dict With Max Limit\nM20\nM10\n\n\nCheck Positive Odd Or Negative Even\nM20\nM10\n\n\nLast Word In A Given Sentence That Starts With Uppercase Letter\nM20\nM10\n\n\nCount Positive Integers Ignoring None\nM20\nM10\n\n\nUpper Case Only Vowels Cluster\nM20\nM10\n\n\nFind Sum And Absolute Difference Alternately\nM20\nM10\n\n\nStudent Marks Filter\nM20\nM10\n\n\nMatrix Walk Cluster\nM20\nM10\n\n\nPrint Pattern - V\nM20\nM10\n\n\nPattern Print - N\nM20\nM10"
  }
]